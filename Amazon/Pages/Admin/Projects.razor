@page "/admin/projects"
@page "/admin"
@inherits OwningComponentBase<IBookRepository>  

@* this page is to display all fo the books and gives the user the abilty to CRUD the database *@
@*here is an alert i added to remind the user about the dangers of the delete button*@ 
<div class="alert alert-danger" role="alert">
    Beware! Once a record is deleted, it is gone forever!
</div>

<table class="table table-sm table-striped table-bordered">

    <thead>
        <tr>
            <th>Book Id</th>
            <th>Book Title</th>
            <th>Category</th>
        </tr>
    </thead>
    <tbody>
        @if (BookData?.Count() > 0)
        {
            //list the books
            @foreach (Book b in BookData)
            {
        <tr>
            <td>@b.BookId</td>
            <td>@b.Title</td>
            <td>@b.Category</td>
            @*I added prettier outline buttons here*@
            <td>
                <NavLink class="btn btn-outline-primary btn-sm" href="@GetDetailsUrl(b.BookId)">Details</NavLink>
            </td>
            <td>
                <NavLink class="btn btn-outline-warning btn-sm" href="@GetEditUrl(b.BookId)">Edit</NavLink>
            </td>
            <td>
                <NavLink class="btn btn-outline-danger btn-sm" @onclick="@(x => RemoveBook(b))">Delete</NavLink>
            </td>
        </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Books</td>
            </tr>
        }
    </tbody>
</table>

<NavLink class="btn btn-primary" href="/admin/projects/create">Create</NavLink>

@code {
    public IBookRepository repo => Service;

    public IEnumerable<Book> BookData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public string GetDetailsUrl(long id) => $"/admin/projects/details/{id}";
    public string GetEditUrl(long id) => $"/admin/projects/edit/{id}";


    public async Task RemoveBook(Book b)
    {
        repo.DeleteBook(b);
        await UpdateData();
    }

    public async Task UpdateData()
    {
        BookData = await repo.Books.ToListAsync();
    }





}


